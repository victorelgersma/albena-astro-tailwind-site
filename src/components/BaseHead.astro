---
import "@/styles/global.css";
import { SITE_METADATA } from "@/consts";
import { ViewTransitions } from "astro:transitions";
import "@fontsource/onest";
import { getEntry, type CollectionEntry } from "astro:content";
import Favicon from "@/assets/favicon.svg";
import { getImage } from "astro:assets";
import Analytics from "./Analytics.astro";

interface Props {
  title: string;
  description: string;
  ogImage?: string;
  robots?: string; // default to SITE_METADATA.robots
  titleTemplate?: string;
  article?: {
    publishedTime: Date;
    modifiedTime?: Date;
    authors: string[];
    authorTwitter?: string;
    tags: string[];
    cover: CollectionEntry<"blog">["data"]["cover"];
  };
}

const {
  title,
  description,
  robots = SITE_METADATA.robots,
  article,
  titleTemplate,
} = Astro.props;

// The default author is the site creator
const creator = await getEntry("authors", "default");

// Optimize favicon and touch icons
const favicon = await getImage({ src: Favicon, width: 16, height: 16 });
const appleTouchIcon = await getImage({ src: Favicon, width: 76, height: 76 });
const favicon32 = await getImage({ src: Favicon, width: 32, height: 32 });
const favicon16 = await getImage({ src: Favicon, width: 16, height: 16 });

// Optimize open graph image
let openGraphImage;
if (article?.cover) {
  openGraphImage = await getImage({
    src: article.cover,
    width: 1200,
    height: 630,
  });
} else {
  const importedOgImage = await import(`../assets/og-image.png`).then(
    (m) => m.default,
  );
  openGraphImage = await getImage({
    src: importedOgImage,
    width: 1200,
    height: 630,
  });
}

const twitterCreator = article?.authorTwitter || creator.data.twitter;
const isProduction = import.meta.env.PROD;
---

<head>
  <meta charset="UTF-8" />
</head>
